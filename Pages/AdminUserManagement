import React, { useState, useEffect } from 'react';
import AdminSidebar from '../components/admin/AdminSidebar';
import { User } from '@/entities/all';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Eye, Search, ChevronLeft, ChevronRight } from 'lucide-react';
import { format } from 'date-fns';

const ITEMS_PER_PAGE = 10;

export default function AdminUserManagement() {
  const [users, setUsers] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [currentUserForAccessCheck, setCurrentUserForAccessCheck] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const checkUserRoleAndLoadData = async () => {
      try {
        const user = await User.me();
        setCurrentUserForAccessCheck(user);
        if (user.role !== 'admin') {
          navigate(createPageUrl('Dashboard'));
          return;
        }
        fetchUsers();
      } catch (e) {
        navigate(createPageUrl('Landing'));
      }
    };
    checkUserRoleAndLoadData();
  }, [navigate]);

  const fetchUsers = async () => {
    setIsLoading(true);
    try {
      const allUsers = await User.list('-created_date'); // Sort by most recent
      setUsers(allUsers);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
    setIsLoading(false);
  };

  const handleVerificationToggle = async (userId, currentStatus) => {
    try {
      await User.update(userId, { is_verified_by_admin: !currentStatus });
      // Re-fetch or update local state
      setUsers(prevUsers => 
        prevUsers.map(u => u.id === userId ? { ...u, is_verified_by_admin: !currentStatus } : u)
      );
    } catch (error) {
      console.error("Error updating user verification status:", error);
      alert("Failed to update verification status.");
    }
  };

  const filteredUsers = users.filter(user =>
    (user.full_name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
    (user.email?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
    (user.phone?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
    (user.role?.toLowerCase() || '').includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredUsers.length / ITEMS_PER_PAGE);
  const paginatedUsers = filteredUsers.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);

  if (isLoading || !currentUserForAccessCheck) {
     return (
        <div className="flex h-screen">
            <AdminSidebar />
            <div className="flex-1 p-8 bg-gray-100 flex items-center justify-center">
                <div className="text-xl font-semibold">Loading User Management...</div>
            </div>
        </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <AdminSidebar />
      <main className="flex-1 p-6 md:p-10">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800">User Management</h1>
          <p className="text-gray-600">View, search, and manage user accounts.</p>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-lg">
          <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
            <div className="relative w-full sm:w-72">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
              <Input
                placeholder="Search users (name, email, role...)"
                value={searchTerm}
                onChange={(e) => { setSearchTerm(e.target.value); setCurrentPage(1); }}
                className="pl-10"
              />
            </div>
            {/* <Button> <Plus className="w-4 h-4 mr-2" /> Add New User </Button> */} {/* Future feature */}
          </div>

          {isLoading ? (
            <p className="text-center py-8">Loading users...</p>
          ) : paginatedUsers.length === 0 ? (
            <p className="text-center py-8 text-gray-500">No users found.</p>
          ) : (
            <>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Full Name</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Role</TableHead>
                      <TableHead>Phone</TableHead>
                      <TableHead>Joined</TableHead>
                      <TableHead>Verified</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {paginatedUsers.map((user) => (
                      <TableRow key={user.id}>
                        <TableCell className="font-medium">{user.full_name || 'N/A'}</TableCell>
                        <TableCell>{user.email}</TableCell>
                        <TableCell>
                          <Badge variant={user.role === 'admin' ? 'destructive' : 'secondary'}>
                            {user.role}
                          </Badge>
                        </TableCell>
                        <TableCell>{user.phone || 'N/A'}</TableCell>
                        <TableCell>{format(new Date(user.created_date), 'MMM d, yyyy')}</TableCell>
                        <TableCell>
                          <Switch
                            checked={user.is_verified_by_admin}
                            onCheckedChange={() => handleVerificationToggle(user.id, user.is_verified_by_admin)}
                            aria-label={`Verify user ${user.full_name}`}
                          />
                        </TableCell>
                        <TableCell>
                          <Button variant="ghost" size="icon" onClick={() => alert(`View details for ${user.full_name}`)}>
                            <Eye className="w-4 h-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

              {totalPages > 1 && (
                <div className="flex justify-between items-center mt-6">
                  <Button
                    variant="outline"
                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                    disabled={currentPage === 1}
                  >
                    <ChevronLeft className="w-4 h-4 mr-2" /> Previous
                  </Button>
                  <span className="text-sm text-gray-600">
                    Page {currentPage} of {totalPages}
                  </span>
                  <Button
                    variant="outline"
                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                    disabled={currentPage === totalPages}
                  >
                    Next <ChevronRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              )}
            </>
          )}
        </div>
      </main>
    </div>
  );
}