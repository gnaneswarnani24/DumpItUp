import React, { useState, useEffect } from 'react';
import AdminSidebar from '../components/admin/AdminSidebar';
import { User, Pickup } from '@/entities/all'; // User is needed for access check
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Eye, Search, Filter, Calendar as CalendarIcon, MapPin, ChevronLeft, ChevronRight, Edit2 } from 'lucide-react';
import { format } from 'date-fns';
import PickupDetailModal from '../components/pickup/PickupDetailModal'; // Re-use existing modal

const ITEMS_PER_PAGE = 10;

const statusColors = {
  scheduled: "bg-blue-100 text-blue-800",
  in_progress: "bg-yellow-100 text-yellow-800",
  assigned: "bg-indigo-100 text-indigo-800",
  completed: "bg-green-100 text-green-800",
  cancelled: "bg-red-100 text-red-800",
  missed: "bg-gray-100 text-gray-800"
};


export default function AdminPickupManagement() {
  const [pickups, setPickups] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedPickupForModal, setSelectedPickupForModal] = useState(null);
  const [currentUserForAccessCheck, setCurrentUserForAccessCheck] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const checkUserRoleAndLoadData = async () => {
      try {
        const user = await User.me();
        setCurrentUserForAccessCheck(user);
        if (user.role !== 'admin') {
          navigate(createPageUrl('Dashboard'));
          return;
        }
        fetchPickups();
      } catch (e) {
        navigate(createPageUrl('Landing'));
      }
    };
    checkUserRoleAndLoadData();
  }, [navigate]);

  const fetchPickups = async () => {
    setIsLoading(true);
    try {
      const allPickups = await Pickup.list('-pickup_date'); // Sort by most recent pickup_date
      setPickups(allPickups);
    } catch (error) {
      console.error("Error fetching pickups:", error);
    }
    setIsLoading(false);
  };
  
  const handleStatusUpdate = async (pickupId, newStatus) => {
    // This is a placeholder. In a real app, you'd show a modal to confirm or assign agent etc.
    try {
        await Pickup.update(pickupId, { status: newStatus });
        fetchPickups(); // Refresh data
        alert(`Pickup ${pickupId} status updated to ${newStatus}`);
    } catch (error) {
        console.error("Error updating pickup status:", error);
        alert("Failed to update pickup status.");
    }
  };


  const filteredPickups = pickups.filter(pickup => {
    const searchTermMatch = 
      (pickup.full_name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
      (pickup.id?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
      (pickup.address_details?.town_city?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
      (pickup.phone_number?.toLowerCase() || '').includes(searchTerm.toLowerCase());
    const statusMatch = statusFilter === "all" || pickup.status === statusFilter;
    return searchTermMatch && statusMatch;
  });

  const totalPages = Math.ceil(filteredPickups.length / ITEMS_PER_PAGE);
  const paginatedPickups = filteredPickups.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);

  if (isLoading || !currentUserForAccessCheck) {
     return (
        <div className="flex h-screen">
            <AdminSidebar />
            <div className="flex-1 p-8 bg-gray-100 flex items-center justify-center">
                <div className="text-xl font-semibold">Loading Pickup Management...</div>
            </div>
        </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <AdminSidebar />
      <main className="flex-1 p-6 md:p-10">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800">Pickup Management</h1>
          <p className="text-gray-600">Monitor and manage all pickup requests.</p>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-lg">
          <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
            <div className="relative w-full sm:w-72">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
              <Input
                placeholder="Search by name, ID, city..."
                value={searchTerm}
                onChange={(e) => { setSearchTerm(e.target.value); setCurrentPage(1); }}
                className="pl-10"
              />
            </div>
            <div className="flex items-center gap-2">
                <Filter className="w-5 h-5 text-gray-400" />
                <Select value={statusFilter} onValueChange={(value) => { setStatusFilter(value); setCurrentPage(1); }}>
                    <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="all">All Statuses</SelectItem>
                        <SelectItem value="scheduled">Scheduled</SelectItem>
                        <SelectItem value="assigned">Assigned</SelectItem>
                        <SelectItem value="in_progress">In Progress</SelectItem>
                        <SelectItem value="completed">Completed</SelectItem>
                        <SelectItem value="cancelled">Cancelled</SelectItem>
                        <SelectItem value="missed">Missed</SelectItem>
                    </SelectContent>
                </Select>
            </div>
          </div>

          {isLoading ? (
            <p className="text-center py-8">Loading pickups...</p>
          ) : paginatedPickups.length === 0 ? (
            <p className="text-center py-8 text-gray-500">No pickups found matching your criteria.</p>
          ) : (
            <>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Pickup ID</TableHead>
                      <TableHead>User Name</TableHead>
                      <TableHead>Date & Time</TableHead>
                      <TableHead>Location</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {paginatedPickups.map((pickup) => (
                      <TableRow key={pickup.id}>
                        <TableCell className="font-mono text-xs">{pickup.id?.slice(0, 8)}...</TableCell>
                        <TableCell className="font-medium">{pickup.full_name}</TableCell>
                        <TableCell>
                          {format(new Date(pickup.pickup_date), 'MMM d, yyyy')}
                          <span className="text-gray-500 block text-xs">{pickup.pickup_time_slot}</span>
                        </TableCell>
                        <TableCell>
                          {pickup.address_details?.street_area_locality || 'N/A'}
                          <span className="text-gray-500 block text-xs">
                            {pickup.address_details?.town_city || 'N/A'}
                          </span>
                        </TableCell>
                        <TableCell>
                          <Badge className={`${statusColors[pickup.status] || 'bg-gray-100 text-gray-800'}`}>
                            {pickup.status?.replace('_', ' ') || 'Unknown'}
                          </Badge>
                        </TableCell>
                        <TableCell className="space-x-1">
                          <Button variant="ghost" size="icon" onClick={() => setSelectedPickupForModal(pickup)}>
                            <Eye className="w-4 h-4" />
                          </Button>
                           <Select 
                            onValueChange={(newStatus) => handleStatusUpdate(pickup.id, newStatus)}
                            defaultValue={pickup.status}
                           >
                            <SelectTrigger asChild>
                                <Button variant="ghost" size="icon" title="Change Status">
                                    <Edit2 className="w-4 h-4 text-gray-500" />
                                </Button>
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="scheduled">Scheduled</SelectItem>
                                <SelectItem value="assigned">Assigned</SelectItem>
                                <SelectItem value="in_progress">In Progress</SelectItem>
                                <SelectItem value="completed">Completed</SelectItem>
                                <SelectItem value="cancelled">Cancelled</SelectItem>
                                <SelectItem value="missed">Missed</SelectItem>
                            </SelectContent>
                           </Select>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

              {totalPages > 1 && (
                <div className="flex justify-between items-center mt-6">
                  <Button
                    variant="outline"
                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                    disabled={currentPage === 1}
                  >
                    <ChevronLeft className="w-4 h-4 mr-2" /> Previous
                  </Button>
                  <span className="text-sm text-gray-600">
                    Page {currentPage} of {totalPages}
                  </span>
                  <Button
                    variant="outline"
                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                    disabled={currentPage === totalPages}
                  >
                    Next <ChevronRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              )}
            </>
          )}
        </div>
        {selectedPickupForModal && (
          <PickupDetailModal 
            pickup={selectedPickupForModal} 
            onClose={() => setSelectedPickupForModal(null)} 
          />
        )}
      </main>
    </div>
  );
}