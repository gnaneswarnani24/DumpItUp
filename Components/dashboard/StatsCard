import React, { useState, useEffect } from 'react';
import AdminSidebar from '../components/admin/AdminSidebar';
import { User, Reward } from '@/entities/all'; // User for access check
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Plus, Edit, Trash2, Eye, Search, Gift as GiftIcon, Star } from 'lucide-react';
import { format } from 'date-fns';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";

const rewardTypes = ["voucher", "badge", "certificate", "physical_item"];

export default function AdminRewardManagement() {
  const [rewards, setRewards] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [showFormDialog, setShowFormDialog] = useState(false);
  const [editingReward, setEditingReward] = useState(null); // null for new, object for edit
  const [rewardFormData, setRewardFormData] = useState({
    title: "",
    description: "",
    points_required: 0,
    reward_type: rewardTypes[0],
    brand_partner: "",
    voucher_code: "",
    image_url: "",
    expiry_date: "",
    is_active: true,
  });
  const [currentUserForAccessCheck, setCurrentUserForAccessCheck] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const checkUserRoleAndLoadData = async () => {
      try {
        const user = await User.me();
        setCurrentUserForAccessCheck(user);
        if (user.role !== 'admin') {
          navigate(createPageUrl('Dashboard'));
          return;
        }
        fetchRewards();
      } catch (e) {
        navigate(createPageUrl('Landing'));
      }
    };
    checkUserRoleAndLoadData();
  }, [navigate]);

  const fetchRewards = async () => {
    setIsLoading(true);
    try {
      const allRewards = await Reward.list('-created_date');
      setRewards(allRewards);
    } catch (error) {
      console.error("Error fetching rewards:", error);
    }
    setIsLoading(false);
  };
  
  const resetForm = () => {
    setRewardFormData({
      title: "", description: "", points_required: 0, reward_type: rewardTypes[0],
      brand_partner: "", voucher_code: "", image_url: "", expiry_date: "", is_active: true,
    });
    setEditingReward(null);
  };

  const handleOpenFormDialog = (reward = null) => {
    if (reward) {
      setEditingReward(reward);
      setRewardFormData({
        ...reward,
        points_required: reward.points_required || 0,
        expiry_date: reward.expiry_date ? format(new Date(reward.expiry_date), 'yyyy-MM-dd') : '', // Format for input type date
      });
    } else {
      resetForm();
    }
    setShowFormDialog(true);
  };

  const handleFormInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setRewardFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : (type === 'number' ? parseFloat(value) || 0 : value)
    }));
  };
  
  const handleSelectChange = (name, value) => {
     setRewardFormData(prev => ({ ...prev, [name]: value }));
  };


  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true); // Use main loading state for simplicity or add a form-specific one
    
    const dataToSave = {
        ...rewardFormData,
        // Ensure points_required is a number
        points_required: Number(rewardFormData.points_required) || 0,
        // Ensure expiry_date is either null or a valid date string if provided
        expiry_date: rewardFormData.expiry_date || null,
    };

    try {
      if (editingReward) {
        await Reward.update(editingReward.id, dataToSave);
      } else {
        await Reward.create(dataToSave);
      }
      fetchRewards();
      setShowFormDialog(false);
      resetForm();
    } catch (error) {
      console.error("Error saving reward:", error);
      alert(`Failed to save reward: ${error.message || error}`);
    }
    setIsLoading(false);
  };
  
  const handleDeleteReward = async (rewardId) => {
      if (confirm("Are you sure you want to delete this reward? This action cannot be undone.")) {
          setIsLoading(true);
          try {
              await Reward.delete(rewardId);
              fetchRewards();
          } catch (error) {
              console.error("Error deleting reward:", error);
              alert("Failed to delete reward.");
          }
          setIsLoading(false);
      }
  };


  const filteredRewards = rewards.filter(reward =>
    reward.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    reward.brand_partner?.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  if (isLoading || !currentUserForAccessCheck) {
     return (
        <div className="flex h-screen">
            <AdminSidebar />
            <div className="flex-1 p-8 bg-gray-100 flex items-center justify-center">
                <div className="text-xl font-semibold">Loading Reward Management...</div>
            </div>
        </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <AdminSidebar />
      <main className="flex-1 p-6 md:p-10">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Reward Management</h1>
            <p className="text-gray-600">Manage all redeemable rewards in the system.</p>
          </div>
           <Button onClick={() => handleOpenFormDialog()}>
            <Plus className="w-4 h-4 mr-2" /> Add New Reward
          </Button>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-lg">
          <div className="relative w-full sm:w-72 mb-6">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
            <Input
              placeholder="Search rewards by title or brand..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {isLoading && rewards.length === 0 ? ( // Show loading only if rewards are not yet fetched
            <p className="text-center py-8">Loading rewards...</p>
          ) : filteredRewards.length === 0 ? (
            <p className="text-center py-8 text-gray-500">No rewards found.</p>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Title</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Points</TableHead>
                    <TableHead>Brand</TableHead>
                    <TableHead>Active</TableHead>
                    <TableHead>Expiry</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredRewards.map((reward) => (
                    <TableRow key={reward.id}>
                      <TableCell className="font-medium flex items-center gap-2">
                        {reward.image_url ? 
                            <img src={reward.image_url} alt={reward.title} className="w-8 h-8 rounded object-cover"/> 
                            : <GiftIcon className="w-5 h-5 text-gray-400"/>
                        }
                        {reward.title}
                      </TableCell>
                      <TableCell><Badge variant="outline">{reward.reward_type}</Badge></TableCell>
                      <TableCell className="flex items-center gap-1">
                        <Star className="w-4 h-4 text-amber-400"/> {reward.points_required}
                      </TableCell>
                      <TableCell>{reward.brand_partner || 'N/A'}</TableCell>
                      <TableCell>
                        <Badge variant={reward.is_active ? 'default' : 'secondary'} className={reward.is_active ? 'bg-green-500' : ''}>
                          {reward.is_active ? 'Yes' : 'No'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        {reward.expiry_date ? format(new Date(reward.expiry_date), 'MMM d, yyyy') : 'N/A'}
                      </TableCell>
                      <TableCell className="space-x-1">
                        <Button variant="ghost" size="icon" onClick={() => handleOpenFormDialog(reward)}>
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-700" onClick={() => handleDeleteReward(reward.id)}>
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </div>

        <Dialog open={showFormDialog} onOpenChange={(isOpen) => { if(!isOpen) resetForm(); setShowFormDialog(isOpen);}}>
          <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>{editingReward ? 'Edit Reward' : 'Create New Reward'}</DialogTitle>
              <DialogDescription>
                {editingReward ? 'Update the details of this reward.' : 'Fill in the details for the new reward.'}
              </DialogDescription>
            </DialogHeader>
            <form onSubmit={handleFormSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 py-4">
              <div className="space-y-1.5">
                <Label htmlFor="title">Title *</Label>
                <Input id="title" name="title" value={rewardFormData.title} onChange={handleFormInputChange} required />
              </div>
              <div className="space-y-1.5">
                <Label htmlFor="points_required">Points Required *</Label>
                <Input id="points_required" name="points_required" type="number" value={rewardFormData.points_required} onChange={handleFormInputChange} required min="0"/>
              </div>
              <div className="md:col-span-2 space-y-1.5">
                <Label htmlFor="description">Description</Label>
                <Textarea id="description" name="description" value={rewardFormData.description} onChange={handleFormInputChange} rows={3}/>
              </div>
               <div className="space-y-1.5">
                <Label htmlFor="reward_type">Reward Type *</Label>
                <Select name="reward_type" value={rewardFormData.reward_type} onValueChange={(value) => handleSelectChange('reward_type', value)}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                        {rewardTypes.map(type => <SelectItem key={type} value={type}>{type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}</SelectItem>)}
                    </SelectContent>
                </Select>
              </div>
              <div className="space-y-1.5">
                <Label htmlFor="brand_partner">Brand Partner</Label>
                <Input id="brand_partner" name="brand_partner" value={rewardFormData.brand_partner} onChange={handleFormInputChange} />
              </div>
              <div className="space-y-1.5">
                <Label htmlFor="voucher_code">Voucher Code (if applicable)</Label>
                <Input id="voucher_code" name="voucher_code" value={rewardFormData.voucher_code} onChange={handleFormInputChange} />
              </div>
              <div className="space-y-1.5">
                <Label htmlFor="image_url">Image URL</Label>
                <Input id="image_url" name="image_url" value={rewardFormData.image_url} onChange={handleFormInputChange} placeholder="https://example.com/image.png"/>
              </div>
              <div className="space-y-1.5">
                <Label htmlFor="expiry_date">Expiry Date</Label>
                <Input id="expiry_date" name="expiry_date" type="date" value={rewardFormData.expiry_date} onChange={handleFormInputChange} />
              </div>
              <div className="flex items-center space-x-2 mt-2">
                <Switch id="is_active" name="is_active" checked={rewardFormData.is_active} onCheckedChange={(checked) => handleSelectChange('is_active', checked)} />
                <Label htmlFor="is_active">Is Active</Label>
              </div>
            
              <DialogFooter className="md:col-span-2 mt-4">
                <DialogClose asChild>
                    <Button type="button" variant="outline">Cancel</Button>
                </DialogClose>
                <Button type="submit" disabled={isLoading}>
                  {isLoading && !editingReward ? 'Creating...' : (isLoading && editingReward ? 'Saving...' : (editingReward ? 'Save Changes' : 'Create Reward'))}
                </Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>

      </main>
    </div>
  );
}