
import React, { useState, useEffect, useRef } from "react";
import { Pickup, WastePrice } from "@/entities/all"; // Added WastePrice
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Calendar as CalendarIconLucide, X, MapPin, CheckCircle2, LocateFixed, DollarSign } from "lucide-react"; // Added DollarSign
import { Calendar as CalendarPicker } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format } from "date-fns";
import { motion } from "framer-motion";

import { MapContainer, TileLayer, Marker, useMapEvents, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

// Fix for default Leaflet marker icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});


// const wasteCategoriesList = [
//   "Paper & Cardboard", "Plastic Bottles", "Metal Cans", 
//   "Glass Bottles", "Electronics", "Clothes & Textiles", "Books & Magazines"
// ]; // To be replaced by fetched data

const weightRanges = ["0-2 kgs", "2-5 kgs", "5-10 kgs", "10+ kgs"];
const timeSlotsList = ["9-12 AM", "12-3 PM", "3-6 PM", "6-9 PM", "Flexible"];

function LocationMarker({ position, setPosition }) {
  const map = useMapEvents({
    click(e) {
      setPosition(e.latlng);
      map.flyTo(e.latlng, map.getZoom());
    },
  });

  return position === null ? null : (
    <Marker position={position}>
      <Popup>Pickup location</Popup>
    </Marker>
  );
}

export default function NewPickupForm({ currentUser, onClose, onSuccess }) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [mapPosition, setMapPosition] = useState(null); // Default to null initially
  const [mapCenter, setMapCenter] = useState({ lat: 28.6139, lng: 77.2090 }); // Default center for the map (Delhi)
  const [wastePrices, setWastePrices] = useState([]);
  const [wasteCategoriesList, setWasteCategoriesList] = useState([]);
  const [isLoadingPrices, setIsLoadingPrices] = useState(true);

  const [formData, setFormData] = useState({
    full_name: currentUser?.full_name || "",
    phone_number: currentUser?.phone || "",
    address_details: {
      flat_house_no: "",
      street_area_locality: "",
      town_city: ""
    },
    waste_items: [],
    approximate_weight_range: "",
    pickup_date: null,
    pickup_time_slot: "",
    special_instructions: "",
    gps_coordinates: null // Added for map coordinates
  });
  
  useEffect(() => {
    const fetchWastePrices = async () => {
      setIsLoadingPrices(true);
      try {
        const prices = await WastePrice.list();
        setWastePrices(prices);
        const categories = prices.map(p => p.category_name);
        setWasteCategoriesList(categories);
      } catch (error) {
        console.error("Error fetching waste prices:", error);
        // Fallback to a default list if fetching fails
        setWasteCategoriesList([
          "Paper & Cardboard", "Plastic Bottles", "Metal Cans", 
          "Glass Bottles", "Electronics", "Clothes & Textiles", "Books & Magazines"
        ]);
      } finally {
        setIsLoadingPrices(false);
      }
    };
    fetchWastePrices();

    // Try to get user's current location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userPos = { lat: position.coords.latitude, lng: position.coords.longitude };
          setMapPosition(userPos);
          setMapCenter(userPos);
          setFormData(prev => ({ ...prev, gps_coordinates: { latitude: userPos.lat, longitude: userPos.lng }}));
        },
        () => {
          // If permission denied or error, use default (Delhi)
          console.warn("Geolocation permission denied or failed. Defaulting to Delhi.");
           const defaultPos = { lat: 28.6139, lng: 77.2090 };
           setMapPosition(defaultPos); // Set marker to default if permission denied
           setMapCenter(defaultPos);
           setFormData(prev => ({ ...prev, gps_coordinates: { latitude: defaultPos.lat, longitude: defaultPos.lng }}));
        }
      );
    } else {
        // Geolocation not supported, use default (Delhi)
        console.warn("Geolocation not supported. Defaulting to Delhi.");
        const defaultPos = { lat: 28.6139, lng: 77.2090 };
        setMapPosition(defaultPos); // Set marker to default if not supported
        setMapCenter(defaultPos);
        setFormData(prev => ({ ...prev, gps_coordinates: { latitude: defaultPos.lat, longitude: defaultPos.lng }}));
    }
  }, []); // Run only once on mount

  useEffect(() => {
    if (mapPosition) {
      setFormData(prev => ({
        ...prev,
        gps_coordinates: { latitude: mapPosition.lat, longitude: mapPosition.lng }
      }));
    }
  }, [mapPosition]); // Update formData when mapPosition changes

  const handleInputChange = (e, group = null) => {
    const { name, value } = e.target;
    if (group) {
      setFormData(prev => ({
        ...prev,
        [group]: { ...prev[group], [name]: value }
      }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleWasteCategoryChange = (category) => {
    setFormData(prev => {
      const newWasteItems = prev.waste_items.includes(category)
        ? prev.waste_items.filter(item => item !== category)
        : [...prev.waste_items, category];
      return { ...prev, waste_items: newWasteItems };
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const pickupData = {
        ...formData,
        user_id: currentUser.id,
        pickup_date: formData.pickup_date ? format(formData.pickup_date, 'yyyy-MM-dd') : null, // Ensure date is formatted
        choice_type: 'donate' // Defaulting to donate, can be changed if a choice selector is added
      };
      
      await Pickup.create(pickupData);
      onSuccess();
    } catch (error) {
      console.error("Error scheduling pickup:", error);
      alert("Failed to schedule pickup. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleDetectLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userPos = { lat: position.coords.latitude, lng: position.coords.longitude };
          setMapPosition(userPos);
          setMapCenter(userPos); // also update map center
           if (mapRef.current) { // If map instance exists
            mapRef.current.flyTo(userPos, mapRef.current.getZoom());
          }
          setFormData(prev => ({ ...prev, gps_coordinates: { latitude: userPos.lat, longitude: userPos.lng }}));
        },
        (error) => {
          console.error("Error getting current location:", error);
          alert("Could not detect location. Please ensure location services are enabled or select manually.");
        }
      );
    } else {
      alert("Geolocation is not supported by your browser.");
    }
  };

  const mapRef = useRef(); // For accessing map instance

  const getPriceForCategory = (categoryName) => {
    const priceInfo = wastePrices.find(p => p.category_name === categoryName);
    return priceInfo ? `‚Çπ${priceInfo.price_per_kg}/${priceInfo.unit === 'INR' ? 'kg' : priceInfo.unit}` : "Price N/A";
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-[100]" // Increased z-index
      onClick={onClose}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="bg-white rounded-2xl shadow-2xl max-w-3xl w-full max-h-[95vh] overflow-y-auto" // Increased max-h slightly
        onClick={(e) => e.stopPropagation()}
      >
        <div className="sticky top-0 bg-white border-b border-gray-200 p-6 rounded-t-2xl z-10"> {/* Ensure header is above map */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-3xl">üêï</div>
              <div>
                <h2 className="text-2xl font-bold text-gray-900">Schedule New Pickup</h2>
                <p className="text-gray-600">Let's make the world greener together!</p>
              </div>
            </div>
            <Button variant="ghost" size="icon" onClick={onClose}>
              <X className="w-5 h-5" />
            </Button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-8">
          {/* Personal Information */}
          <section>
            <h3 className="text-lg font-semibold text-gray-700 mb-4">Personal Information</h3>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="full_name">Full Name *</Label>
                <Input 
                  id="full_name" 
                  name="full_name" 
                  value={formData.full_name} 
                  onChange={handleInputChange} 
                  required 
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone_number">Phone Number *</Label>
                <Input 
                  id="phone_number" 
                  name="phone_number" 
                  type="tel" 
                  value={formData.phone_number} 
                  onChange={handleInputChange} 
                  required 
                />
              </div>
            </div>
          </section>

          {/* Address Information */}
          <section>
            <h3 className="text-lg font-semibold text-gray-700 mb-4">Address Information</h3>
            <div className="space-y-4">
              <Input 
                name="flat_house_no" 
                placeholder="Flat/House No. *" 
                value={formData.address_details.flat_house_no} 
                onChange={(e) => handleInputChange(e, 'address_details')} 
                required 
              />
              <Input 
                name="street_area_locality" 
                placeholder="Street/Area/Locality *" 
                value={formData.address_details.street_area_locality} 
                onChange={(e) => handleInputChange(e, 'address_details')} 
                required 
              />
              <Input 
                name="town_city" 
                placeholder="Town/City *" 
                value={formData.address_details.town_city} 
                onChange={(e) => handleInputChange(e, 'address_details')} 
                required 
              />
            </div>
          </section>

          {/* Precise Location Map */}
          <section>
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-700">Precise Pickup Location</h3>
                <Button type="button" variant="outline" size="sm" onClick={handleDetectLocation}>
                    <LocateFixed className="w-4 h-4 mr-2" />
                    Detect My Location
                </Button>
            </div>
            <div className="h-72 w-full rounded-lg overflow-hidden border border-gray-300 z-0"> {/* Ensure map is not overlapping with other elements */}
              {mapCenter && ( // Render map only when center is determined
                <MapContainer 
                    center={mapCenter} 
                    zoom={mapPosition ? 15 : 12} // Zoom in more if position is set
                    style={{ height: '100%', width: '100%' }}
                    whenCreated={mapInstance => { mapRef.current = mapInstance; }} // Store map instance
                >
                    <TileLayer
                        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    />
                    <LocationMarker position={mapPosition} setPosition={setMapPosition} />
                </MapContainer>
              )}
            </div>
            {mapPosition && (
                <p className="text-xs text-gray-500 mt-2">
                    Selected: Lat: {mapPosition.lat.toFixed(5)}, Lng: {mapPosition.lng.toFixed(5)}
                </p>
            )}
            <p className="text-xs text-gray-500 mt-1">Click on the map to set your pickup location or use "Detect My Location".</p>
          </section>

          {/* Waste Categories */}
          <section>
            <h3 className="text-lg font-semibold text-gray-700 mb-1">What do you want to recycle? *</h3>
            <p className="text-xs text-gray-500 mb-4">Select items and see indicative market prices.</p>
            {isLoadingPrices ? (
              <p>Loading waste categories and prices...</p>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-6">
                {wasteCategoriesList.map(category => (
                  <div key={category} className="flex items-start space-x-2 bg-gray-50 p-3 rounded-lg">
                    <Checkbox 
                      id={category.replace(/\s+/g, '')} 
                      checked={formData.waste_items.includes(category)}
                      onCheckedChange={() => handleWasteCategoryChange(category)}
                      className="mt-1"
                    />
                    <div className="flex-1">
                      <Label htmlFor={category.replace(/\s+/g, '')} className="text-sm font-medium cursor-pointer">{category}</Label>
                      <p className="text-xs text-emerald-600 flex items-center">
                        <DollarSign className="w-3 h-3 mr-1" /> {getPriceForCategory(category)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
            
            <h4 className="text-md font-medium text-gray-700 mb-3">Approximate weight *</h4>
            <RadioGroup 
              value={formData.approximate_weight_range} 
              onValueChange={(value) => setFormData(prev => ({ ...prev, approximate_weight_range: value }))}
              className="flex flex-wrap gap-3"
            >
              {weightRanges.map(range => (
                <div key={range} className="flex items-center space-x-2 bg-emerald-50 p-3 rounded-lg">
                  <RadioGroupItem value={range} id={range.replace(/\s+/g, '')} />
                  <Label htmlFor={range.replace(/\s+/g, '')} className="text-sm cursor-pointer">{range}</Label>
                </div>
              ))}
            </RadioGroup>
          </section>

          {/* Schedule */}
          <section>
            <h3 className="text-lg font-semibold text-gray-700 mb-4">Preferred Schedule *</h3>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label>Preferred Date</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className="w-full justify-start">
                      <CalendarIconLucide className="mr-2 h-4 w-4" />
                      {formData.pickup_date ? format(formData.pickup_date, 'PPP') : 'Select date'}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0 z-[110]"> {/* Ensure popover is above map */}
                    <CalendarPicker 
                      mode="single" 
                      selected={formData.pickup_date} 
                      onSelect={(date) => setFormData(prev => ({...prev, pickup_date: date}))} 
                      disabled={(date) => date < new Date()} 
                    />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="space-y-2">
                <Label>Preferred Time</Label>
                <Select 
                  value={formData.pickup_time_slot} 
                  onValueChange={(value) => setFormData(prev => ({...prev, pickup_time_slot: value}))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select time slot" />
                  </SelectTrigger>
                  <SelectContent className="z-[110]"> {/* Ensure select content is above map */}
                    {timeSlotsList.map(slot => <SelectItem key={slot} value={slot}>{slot}</SelectItem>)}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </section>

          {/* Special Instructions */}
          <section>
            <h3 className="text-lg font-semibold text-gray-700 mb-4">Special Instructions (Optional)</h3>
            <Textarea 
              name="special_instructions" 
              value={formData.special_instructions} 
              onChange={handleInputChange} 
              placeholder="Any special instructions..."
              rows={3}
            />
          </section>

          <div className="flex gap-4 pt-6 border-t">
            <Button type="button" variant="outline" onClick={onClose} className="flex-1">
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting} className="flex-1 eco-gradient">
              {isSubmitting ? 'Scheduling...' : 'Schedule Pickup'}
            </Button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
}
